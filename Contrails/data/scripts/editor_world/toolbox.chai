
/**
 * The basic tool layout.
 */
class Tool
{
	def Tool() {}
	
	/**
	 * Retrieves the name of the tool
	 * @return The name of the tool
	 */
	def getName() { return ""; }
	/**
	 * Checks if the tool should process the provided event or not
	 * @param event The event to process or not
	 * @return True iff the event should be processed by this tool
	 */
	def accept(event) { return false; }
	/**
	 * Performs some work defined by the tool
	 */
	def perform(event) {}
}

/**
 * The toolbox stores and provides easy access to every tool that
 * has been added to the editor.
 */
class Toolbox
{
	def Toolbox() { this.tools = ["":Tool()]; }
	
	attr tools;
	
	/**
	 * Adds the given tool to the toolbox
	 * @param tool The tool to add
	 */
	def add(tool)
	{
		LOG_INFO("Adding " + tool.getName() + " to toolbox");
		this.tools[tool.getName()] = tool;
		return tool;
	}
	/**
	 * Attempts to retrieve a tool from the toolbox
	 * @param tool The name of the tool to grab
	 */
	def get(name)
	{
		return this.tools[name];
	}
}

global TOOLBOX = Toolbox();
global TOOL := TOOLBOX.get("");

// ...

/**
 * Assigns the tool to use for the next operations
 * @param tool The tool that is chosen
 */
def selectTool(tool)
{
	if (!TOOL.is_var_null())
	{
		setShapeDataVisibility(TOOL, false);
	}
	if (!tool.is_var_null())
	{
		setShapeDataVisibility(tool, true);
	}
	
	TOOL := tool;
}

/**
 * Sets whether the widget displaying data to the user for the
 * provided tool should be visible or not
 * @param tool The tool that is being worked with
 * @param visible Whether the data should be visible or not
 */
def setToolDataVisibility(tool, visible)
{
	auto name = tool.getName() + "_data";
	if (GUI.getWidgets().has(name))
	{
		GUI.getWidgets().get(name).render.visible = visible;
	}
}

// ...

#include "data/scripts/editor_world/tools/brush.chai"
