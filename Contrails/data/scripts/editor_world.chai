
global WORLD_NAME = "world"; // TODO: Replace with startup world name

/**
 * Main entry point for the editor script, set up all necessary data
 * here
 */
def init()
{
	SET_EDITOR_WORLD(prepareEditorWorld(WORLD_NAME));
}
/**
 * Workload is mostly performed here, is invoked once every tick for as
 * long as the editor is active
 */
def process()
{
	GET_EDITOR_WORLD().process();
}

// ...

/**
 * Prepares the editor world for usage within the editor. If the world
 * does not exist, it is created and a starting area is added to it
 * @param worldName The name of the world to prepare
 * @return The world that was prepared
 */
def prepareEditorWorld(worldName)
{
	if (!UNIVERSE.hasWorld(worldName))
	{
		UNIVERSE.createWorld(worldName);
		
		// Generate a small initial platform to work from
		auto world = UNIVERSE.getWorld(worldName);
		auto blocks := world.getBlockRegistry();
		
		world.write(QUERY.writeRectangle(blocks["stone"], ivec3(-32, -32, 0), ivec3(31, 31, 3)));
		world.write(QUERY.writeRectangle(blocks["dirt"], ivec3(-32, -32, 4), ivec3(31, 31, 5)));
		world.write(QUERY.writeRectangle(blocks["grass"], ivec3(-32, -32, 6), ivec3(31, 31, 6)));
	}
	return UNIVERSE.getWorld(worldName);
}

// ...

def setBoxSize(element, name)
{
	auto & widget = GUI.getWidgets().get(name);
	
	LOG_INFO("Received value ${widget.state.float}");
}